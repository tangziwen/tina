18:37 2013/4/13
*添加了typeof原语，使用其能返回指定变量存储值的类型的整数表示形式
*添加了card原语，使用其能返回指定tuple的势的大小（元素个数）
*修正了字符常量读取不正确的错误
23:04 2013/4/12
*废除了vector类型，现在内置类型被唯一化，即tuple类型
*移除了旧式，运行不佳的引用计数的内存管理机制，为下一步添加垃圾回收做准备
10:29 2013/4/2
*修正了字节码的表示
21:19 2013/4/1
*在编译错误时提供更加准确的错误信息
10:25 2013/3/28
*修正了一个原型调用的BUG，同时原型也可以通过Import使用了
18:58 2013/3/27
*重构了对代码块扫描的代码
*修正了多次使用“using”的bug
*修正了在if,while,for中条件控制语句括号判断失误的情况
23:34 2013/3/24
Tina ver 0.1 hurray!!!!!!
19:22 2013/3/23
*增加了import关键字，用于引用别的字节码单元的结构体
*增加链接器
*修正了结构的计数问题
20:32 2013/3/22
*修正了调用原型成员时出现的BUG
*更改了向量类型在存储字符串字面量所采用的存储机制
*添加了导出字节码的功能
22:00 2013/3/18
*修正了数组翻译成中间代码出现的BUG
*剔除了"引用"操作，现在函数严格按值传递
*减少了对求值器的依赖，拆分出更多的原语节点，把C语言控制尽可能转移到中间代码来表述
*添加了常量段，常量从代码中抽取出来
*改变了struct构造的实现，更易于在中间代码中有表述能力
21:49 2013/3/16
*添加了两个内置容器,vector和tuple。前者能够维护同一类型的
元素，后者可以维护不同类型的元素
*废除了字符串类型，添加了字符类型，字符串常量视作维护字符类型的vector
11:31 2013/3/4
*修正了为struct成员赋值时,类型不正确的问题
*所有的struct成员缺省值为nil
20:00 2013/2/23
*添加了基于"引用计数"的自动内存管理机制
*确保了局部变量的初始值始终为nil
*添加,修改了若干个接口,使得用户能够通过API直接创建struct的原型
17:48 2013/2/6
*修正了源码缓存读取方式，使得在不同的编码下正确的读取源文件
*添加了对表达式的语法检查机制，使得编译器能在表达式非法的情况下，立即停止编译并抛出异常,而不是非法运行
*添加了对数组越界的检查
20:57 2013/2/3
*修正了对数组的操作，该BUG错误的对表达式的优先级进行了错误的判断
使得对数组索引的直接操作会导致表达式转换失败
16:04 2013/1/24
*修正了虚拟机在为"self"指针赋值时的BUG，该BUG导致某些情况下(最为显著的是创建匿名对象时)调用对象的成员函数
会导致对象的重复创建。
22:16 2013/1/23
*修正了脚本代码中，将脚本定义函数、nil变量、以及外部导入的API函数作为API函数参数时，
会得到不正确参数个数，传值行为失败的bug
18:32 2013/1/8
*修复了API参数传递错误的问题
*支持称为struct的复合结构，这一特殊的类型允许程序员自己制定由
简单类型组成的抽象数据类型。
*提供了新的关键字"private"使程序员能够控制struct成员的外部访问性
*支持复合结构之间通过“混入”(mix)这一机制, A mix B 表示A结构混入了B结构的
所有非密封成员。
*提供了新的关键字 "sealed"，使程序员能够控制struct成员的密封性
*引入module的这一特性，能够避免标识符冲突
19:45 2012/11/14
*修复一个不同类中函数名称发生冲突的问题
*现在开始，某一个类A依赖于类B时，类B不必提前定义了。
12:04 2012/11/10
*增加了新的API "length"，用于求数组的长度
*不再限制导入的函数的参数个数
*重构部分代码
20:31 2012/10/15
*增加API的函数的退化，API函数现在能够退化成函数指针
0:20 2012/10/15
*增加对函数调用时的传入实参数量不对和无效的表达式的检查
