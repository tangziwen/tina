#------------------------------------------------------------------------------#
# This makefile was generated by 'cbp2make' tool rev.137                       #
#------------------------------------------------------------------------------#


WORKDIR = %cd%

CC = gcc.exe
CXX = g++.exe
AR = ar.exe
LD = g++.exe
WINDRES = windres.exe

INC = 
CFLAGS =  -Wall
RESINC = 
LIBDIR = 
LIB = 
LDFLAGS = 

INC_EXECUTABLE =  $(INC)
CFLAGS_EXECUTABLE =  $(CFLAGS)
RESINC_EXECUTABLE =  $(RESINC)
RCFLAGS_EXECUTABLE =  $(RCFLAGS)
LIBDIR_EXECUTABLE =  $(LIBDIR)
LIB_EXECUTABLE = $(LIB)
LDFLAGS_EXECUTABLE =  $(LDFLAGS) -L.
OBJDIR_EXECUTABLE = .\\obj
DEP_EXECUTABLE = 
OUT_EXECUTABLE = bin\\tina.exe

INC_LIBARY =  $(INC)
CFLAGS_LIBARY =  $(CFLAGS) -O2
RESINC_LIBARY =  $(RESINC)
RCFLAGS_LIBARY =  $(RCFLAGS)
LIBDIR_LIBARY =  $(LIBDIR)
LIB_LIBARY = $(LIB)
LDFLAGS_LIBARY =  $(LDFLAGS) -s -L.
OBJDIR_LIBARY = obj\\Release
DEP_LIBARY = 
OUT_LIBARY = bin\\tina.a

INC_CLEAN =  $(INC)
CFLAGS_CLEAN =  $(CFLAGS)
RESINC_CLEAN =  $(RESINC)
RCFLAGS_CLEAN =  $(RCFLAGS)
LIBDIR_CLEAN =  $(LIBDIR)
LIB_CLEAN = $(LIB)
LDFLAGS_CLEAN =  $(LDFLAGS)
OBJDIR_CLEAN = .objs
DEP_CLEAN = 

OBJ_EXECUTABLE = $(OBJDIR_EXECUTABLE)\\src\\print.o $(OBJDIR_EXECUTABLE)\\src\\return.o $(OBJDIR_EXECUTABLE)\\src\\script_array.o $(OBJDIR_EXECUTABLE)\\src\\script_struct.o $(OBJDIR_EXECUTABLE)\\src\\tina.o $(OBJDIR_EXECUTABLE)\\src\\token.o $(OBJDIR_EXECUTABLE)\\src\\var.o $(OBJDIR_EXECUTABLE)\\src\\vm.o $(OBJDIR_EXECUTABLE)\\src\\while.o $(OBJDIR_EXECUTABLE)\\src\\api.o $(OBJDIR_EXECUTABLE)\\src\\build.o $(OBJDIR_EXECUTABLE)\\src\\expression.o $(OBJDIR_EXECUTABLE)\\src\\for.o $(OBJDIR_EXECUTABLE)\\src\\function.o $(OBJDIR_EXECUTABLE)\\src\\if.o $(OBJDIR_EXECUTABLE)\\src\\il.o $(OBJDIR_EXECUTABLE)\\src\\loader.o $(OBJDIR_EXECUTABLE)\\src\\main.o $(OBJDIR_EXECUTABLE)\\src\\module.o $(OBJDIR_EXECUTABLE)\\src\\preprocess.o

OBJ_LIBARY = $(OBJDIR_LIBARY)\\src\\print.o $(OBJDIR_LIBARY)\\src\\return.o $(OBJDIR_LIBARY)\\src\\script_array.o $(OBJDIR_LIBARY)\\src\\script_struct.o $(OBJDIR_LIBARY)\\src\\tina.o $(OBJDIR_LIBARY)\\src\\token.o $(OBJDIR_LIBARY)\\src\\var.o $(OBJDIR_LIBARY)\\src\\vm.o $(OBJDIR_LIBARY)\\src\\while.o $(OBJDIR_LIBARY)\\src\\api.o $(OBJDIR_LIBARY)\\src\\build.o $(OBJDIR_LIBARY)\\src\\expression.o $(OBJDIR_LIBARY)\\src\\for.o $(OBJDIR_LIBARY)\\src\\function.o $(OBJDIR_LIBARY)\\src\\if.o $(OBJDIR_LIBARY)\\src\\il.o $(OBJDIR_LIBARY)\\src\\loader.o $(OBJDIR_LIBARY)\\src\\main.o $(OBJDIR_LIBARY)\\src\\module.o $(OBJDIR_LIBARY)\\src\\preprocess.o

all: executable libary clean

clean: clean_executable clean_libary before_clean after_clean

before_executable: 
	cmd /c if not exist bin md bin
	cmd /c if not exist $(OBJDIR_EXECUTABLE)\\src md $(OBJDIR_EXECUTABLE)\\src

after_executable: 

executable: before_executable out_executable after_executable

out_executable: $(OBJ_EXECUTABLE) $(DEP_EXECUTABLE)
	$(LD) $(LDFLAGS_EXECUTABLE) $(LIBDIR_EXECUTABLE) $(OBJ_EXECUTABLE) $(LIB_EXECUTABLE) -o $(OUT_EXECUTABLE)

$(OBJDIR_EXECUTABLE)\\src\\print.o: src\\print.c
	$(CC) $(CFLAGS_EXECUTABLE) $(INC_EXECUTABLE) -c src\\print.c -o $(OBJDIR_EXECUTABLE)\\src\\print.o

$(OBJDIR_EXECUTABLE)\\src\\return.o: src\\return.c
	$(CC) $(CFLAGS_EXECUTABLE) $(INC_EXECUTABLE) -c src\\return.c -o $(OBJDIR_EXECUTABLE)\\src\\return.o

$(OBJDIR_EXECUTABLE)\\src\\script_array.o: src\\script_array.c
	$(CC) $(CFLAGS_EXECUTABLE) $(INC_EXECUTABLE) -c src\\script_array.c -o $(OBJDIR_EXECUTABLE)\\src\\script_array.o

$(OBJDIR_EXECUTABLE)\\src\\script_struct.o: src\\script_struct.c
	$(CC) $(CFLAGS_EXECUTABLE) $(INC_EXECUTABLE) -c src\\script_struct.c -o $(OBJDIR_EXECUTABLE)\\src\\script_struct.o

$(OBJDIR_EXECUTABLE)\\src\\tina.o: src\\tina.c
	$(CC) $(CFLAGS_EXECUTABLE) $(INC_EXECUTABLE) -c src\\tina.c -o $(OBJDIR_EXECUTABLE)\\src\\tina.o

$(OBJDIR_EXECUTABLE)\\src\\token.o: src\\token.c
	$(CC) $(CFLAGS_EXECUTABLE) $(INC_EXECUTABLE) -c src\\token.c -o $(OBJDIR_EXECUTABLE)\\src\\token.o

$(OBJDIR_EXECUTABLE)\\src\\var.o: src\\var.c
	$(CC) $(CFLAGS_EXECUTABLE) $(INC_EXECUTABLE) -c src\\var.c -o $(OBJDIR_EXECUTABLE)\\src\\var.o

$(OBJDIR_EXECUTABLE)\\src\\vm.o: src\\vm.c
	$(CC) $(CFLAGS_EXECUTABLE) $(INC_EXECUTABLE) -c src\\vm.c -o $(OBJDIR_EXECUTABLE)\\src\\vm.o

$(OBJDIR_EXECUTABLE)\\src\\while.o: src\\while.c
	$(CC) $(CFLAGS_EXECUTABLE) $(INC_EXECUTABLE) -c src\\while.c -o $(OBJDIR_EXECUTABLE)\\src\\while.o

$(OBJDIR_EXECUTABLE)\\src\\api.o: src\\api.c
	$(CC) $(CFLAGS_EXECUTABLE) $(INC_EXECUTABLE) -c src\\api.c -o $(OBJDIR_EXECUTABLE)\\src\\api.o

$(OBJDIR_EXECUTABLE)\\src\\build.o: src\\build.c
	$(CC) $(CFLAGS_EXECUTABLE) $(INC_EXECUTABLE) -c src\\build.c -o $(OBJDIR_EXECUTABLE)\\src\\build.o

$(OBJDIR_EXECUTABLE)\\src\\expression.o: src\\expression.c
	$(CC) $(CFLAGS_EXECUTABLE) $(INC_EXECUTABLE) -c src\\expression.c -o $(OBJDIR_EXECUTABLE)\\src\\expression.o

$(OBJDIR_EXECUTABLE)\\src\\for.o: src\\for.c
	$(CC) $(CFLAGS_EXECUTABLE) $(INC_EXECUTABLE) -c src\\for.c -o $(OBJDIR_EXECUTABLE)\\src\\for.o

$(OBJDIR_EXECUTABLE)\\src\\function.o: src\\function.c
	$(CC) $(CFLAGS_EXECUTABLE) $(INC_EXECUTABLE) -c src\\function.c -o $(OBJDIR_EXECUTABLE)\\src\\function.o

$(OBJDIR_EXECUTABLE)\\src\\if.o: src\\if.c
	$(CC) $(CFLAGS_EXECUTABLE) $(INC_EXECUTABLE) -c src\\if.c -o $(OBJDIR_EXECUTABLE)\\src\\if.o

$(OBJDIR_EXECUTABLE)\\src\\il.o: src\\il.c
	$(CC) $(CFLAGS_EXECUTABLE) $(INC_EXECUTABLE) -c src\\il.c -o $(OBJDIR_EXECUTABLE)\\src\\il.o

$(OBJDIR_EXECUTABLE)\\src\\loader.o: src\\loader.c
	$(CC) $(CFLAGS_EXECUTABLE) $(INC_EXECUTABLE) -c src\\loader.c -o $(OBJDIR_EXECUTABLE)\\src\\loader.o

$(OBJDIR_EXECUTABLE)\\src\\main.o: src\\main.c
	$(CC) $(CFLAGS_EXECUTABLE) $(INC_EXECUTABLE) -c src\\main.c -o $(OBJDIR_EXECUTABLE)\\src\\main.o

$(OBJDIR_EXECUTABLE)\\src\\module.o: src\\module.c
	$(CC) $(CFLAGS_EXECUTABLE) $(INC_EXECUTABLE) -c src\\module.c -o $(OBJDIR_EXECUTABLE)\\src\\module.o

$(OBJDIR_EXECUTABLE)\\src\\preprocess.o: src\\preprocess.c
	$(CC) $(CFLAGS_EXECUTABLE) $(INC_EXECUTABLE) -c src\\preprocess.c -o $(OBJDIR_EXECUTABLE)\\src\\preprocess.o

clean_executable: 
	cmd /c del /f $(OBJ_EXECUTABLE) $(OUT_EXECUTABLE)
	cmd /c rd bin
	cmd /c rd $(OBJDIR_EXECUTABLE)\\src

before_libary: 
	cmd /c if not exist bin md bin
	cmd /c if not exist $(OBJDIR_LIBARY)\\src md $(OBJDIR_LIBARY)\\src

after_libary: 

libary: before_libary out_libary after_libary

out_libary: $(OBJ_LIBARY) $(DEP_LIBARY)
	$(AR) rcs $(OUT_LIBARY) $(OBJ_LIBARY)

$(OBJDIR_LIBARY)\\src\\print.o: src\\print.c
	$(CC) $(CFLAGS_LIBARY) $(INC_LIBARY) -c src\\print.c -o $(OBJDIR_LIBARY)\\src\\print.o

$(OBJDIR_LIBARY)\\src\\return.o: src\\return.c
	$(CC) $(CFLAGS_LIBARY) $(INC_LIBARY) -c src\\return.c -o $(OBJDIR_LIBARY)\\src\\return.o

$(OBJDIR_LIBARY)\\src\\script_array.o: src\\script_array.c
	$(CC) $(CFLAGS_LIBARY) $(INC_LIBARY) -c src\\script_array.c -o $(OBJDIR_LIBARY)\\src\\script_array.o

$(OBJDIR_LIBARY)\\src\\script_struct.o: src\\script_struct.c
	$(CC) $(CFLAGS_LIBARY) $(INC_LIBARY) -c src\\script_struct.c -o $(OBJDIR_LIBARY)\\src\\script_struct.o

$(OBJDIR_LIBARY)\\src\\tina.o: src\\tina.c
	$(CC) $(CFLAGS_LIBARY) $(INC_LIBARY) -c src\\tina.c -o $(OBJDIR_LIBARY)\\src\\tina.o

$(OBJDIR_LIBARY)\\src\\token.o: src\\token.c
	$(CC) $(CFLAGS_LIBARY) $(INC_LIBARY) -c src\\token.c -o $(OBJDIR_LIBARY)\\src\\token.o

$(OBJDIR_LIBARY)\\src\\var.o: src\\var.c
	$(CC) $(CFLAGS_LIBARY) $(INC_LIBARY) -c src\\var.c -o $(OBJDIR_LIBARY)\\src\\var.o

$(OBJDIR_LIBARY)\\src\\vm.o: src\\vm.c
	$(CC) $(CFLAGS_LIBARY) $(INC_LIBARY) -c src\\vm.c -o $(OBJDIR_LIBARY)\\src\\vm.o

$(OBJDIR_LIBARY)\\src\\while.o: src\\while.c
	$(CC) $(CFLAGS_LIBARY) $(INC_LIBARY) -c src\\while.c -o $(OBJDIR_LIBARY)\\src\\while.o

$(OBJDIR_LIBARY)\\src\\api.o: src\\api.c
	$(CC) $(CFLAGS_LIBARY) $(INC_LIBARY) -c src\\api.c -o $(OBJDIR_LIBARY)\\src\\api.o

$(OBJDIR_LIBARY)\\src\\build.o: src\\build.c
	$(CC) $(CFLAGS_LIBARY) $(INC_LIBARY) -c src\\build.c -o $(OBJDIR_LIBARY)\\src\\build.o

$(OBJDIR_LIBARY)\\src\\expression.o: src\\expression.c
	$(CC) $(CFLAGS_LIBARY) $(INC_LIBARY) -c src\\expression.c -o $(OBJDIR_LIBARY)\\src\\expression.o

$(OBJDIR_LIBARY)\\src\\for.o: src\\for.c
	$(CC) $(CFLAGS_LIBARY) $(INC_LIBARY) -c src\\for.c -o $(OBJDIR_LIBARY)\\src\\for.o

$(OBJDIR_LIBARY)\\src\\function.o: src\\function.c
	$(CC) $(CFLAGS_LIBARY) $(INC_LIBARY) -c src\\function.c -o $(OBJDIR_LIBARY)\\src\\function.o

$(OBJDIR_LIBARY)\\src\\if.o: src\\if.c
	$(CC) $(CFLAGS_LIBARY) $(INC_LIBARY) -c src\\if.c -o $(OBJDIR_LIBARY)\\src\\if.o

$(OBJDIR_LIBARY)\\src\\il.o: src\\il.c
	$(CC) $(CFLAGS_LIBARY) $(INC_LIBARY) -c src\\il.c -o $(OBJDIR_LIBARY)\\src\\il.o

$(OBJDIR_LIBARY)\\src\\loader.o: src\\loader.c
	$(CC) $(CFLAGS_LIBARY) $(INC_LIBARY) -c src\\loader.c -o $(OBJDIR_LIBARY)\\src\\loader.o

$(OBJDIR_LIBARY)\\src\\main.o: src\\main.c
	$(CC) $(CFLAGS_LIBARY) $(INC_LIBARY) -c src\\main.c -o $(OBJDIR_LIBARY)\\src\\main.o

$(OBJDIR_LIBARY)\\src\\module.o: src\\module.c
	$(CC) $(CFLAGS_LIBARY) $(INC_LIBARY) -c src\\module.c -o $(OBJDIR_LIBARY)\\src\\module.o

$(OBJDIR_LIBARY)\\src\\preprocess.o: src\\preprocess.c
	$(CC) $(CFLAGS_LIBARY) $(INC_LIBARY) -c src\\preprocess.c -o $(OBJDIR_LIBARY)\\src\\preprocess.o

clean_libary: 
	cmd /c del /f $(OBJ_LIBARY) $(OUT_LIBARY)
	cmd /c rd bin
	cmd /c rd $(OBJDIR_LIBARY)\\src

before_clean: 

after_clean: 

.PHONY: before_executable after_executable clean_executable before_libary after_libary clean_libary before_clean after_clean

